#!/bin/bash
set -e

die() {
    echo >&2 "ERROR: $*"
    exit 1
}

# emulate gitalb-ci environment when run from working copy
: ${CI_COMMIT_REF_NAME:=$(git symbolic-ref --short HEAD)}
: ${CI_COMMIT_SHA:=$(git rev-parse "${CI_COMMIT_REF_NAME}")}

B=""
GEN=""
DL_DIR=""
HISTREPO=""
HISTREF=""
PRSERV=""
OEENV="poky/oe-init-build-env"
while [ $# -gt 1 ]; do
    case "$1" in
        --dir)
            B="$2"
            shift
            ;;
        --template-conf)
            TEMPLATECONF="$2"
            shift
            ;;
        --sstate-gen)
            GEN="$2"
            shift
            ;;
        --download-dir)
            DL_DIR="$2"
            shift
            ;;
        --buildhistory-repo)
            HISTREPO="$2"
            shift
            ;;
        --buildhistory-ref)
            HISTREF="$2"
            shift
            ;;
        --prserv)
            PRSERV="$2"
            shift
            ;;
        --oe-env)
            OEENV="${2}"
            shift
            ;;
        --)
            shift
            break
            ;;
        -*)
            die "unknown flag '$1'"
            ;;
        *)
            break
            ;;
    esac
    shift
done

[ -n "$B" ] || die "missing --dir"
[ -n "$TEMPLATECONF" ] || die "missing --template-conf"
[ -n "$GEN" ] || die "missing --sstate-gen"
[ -n "$DL_DIR" ] || die "missing --download-dir"
[ -r "$OEENV" ] || die "cannot read '$OEENV', adjust with --oe-env"

[ -d "poky/$TEMPLATECONF" ] || {
    printf "PWD $(pwd)\nLS:\n"
    ls
    echo "/LS"
    die "not found 'poky/$TEMPLATECONF'"
}

if [ -n "$HISTREPO" -a -z "$HISTREF" ]; then
    die "--buildhistory-repo requries --buildhistory-ref"
fi
if [ -n "$HISTREF" -a -z "$HISTREPO" ]; then
    die "--buildhistory-ref requries --buildhistory-repo"
fi

TOP=$(pwd)
SSTATE="${HOME}/sstate-cache-$GEN"

# make sure any old config has been migrated
if [ -n "$BASEGEN_ALLOWED_BRANCHES" ]; then
    die "BASEGEN_ALLOWED_BRANCHES has been replaced with 'permissions' file in sstate"
fi

# check we have permission to contribute to this sstate
if [ -r "${SSTATE}/permissions" ]; then
    # permissions provided: repo MUST match one line
    while true; do
        while IFS='|' read repo branches tagpatterns _futurestuff; do
            if [ -n "$futurestuff" ]; then
                die "this script only knows 'repo|branches|tagpatterns', cannot parse '$_futurestuff'"
            fi

            if [ "$repo" != "${CI_PROJECT_URL}" ]; then
                # line does not describe this repo
                continue
            fi

            # here repo has been found

            if [ -n "${CI_COMMIT_TAG}" ]; then
                if [ -z "$tagpatterns" ]; then
                    # no pattern: all tags accepted
                    break 2
                fi
                # "for tagpattern in $tagpatterns" while protecting from glob expansion
                tmpfile=$(mktemp)
                echo "$tagpatterns " | tr ' ' '\n' > "$tmpfile"
                while < "$tmpfile" read tagpattern; do
                    case "${CI_COMMIT_TAG}" in
                        $tagpattern)
                            # tag matched
                            rm "$tmpfile"
                            break 3 ;;
                    esac
                done
                rm "$tmpfile"
                die "REPO='${CI_PROJECT_URL}' is authorized by \"permissions\" file, but tag '${CI_COMMIT_TAG}' does not match any pattern in '${tagpatterns}'"

            elif [ -n "${CI_COMMIT_BRANCH}" ]; then
                if [ -z "$branches" ]; then
                    # empty list: all branches accepted
                    break 2
                fi
                for branch in $branches; do
                    if [ $branch = "${CI_COMMIT_BRANCH}" ]; then
                        # branch matched
                        break 3
                    fi
                done
                die "REPO='${CI_PROJECT_URL}' is authorized by \"permissions\" file, but BRANCH='${CI_COMMIT_BRANCH}' does not match any in '$branches'"

            else
                die "REPO='${CI_PROJECT_URL}' is authorized by \"permissions\" file, but '${CI_COMMIT_REF_NAME}' is not an authorized branch or tag"
            fi
            # not reached
            die "internal error, reached unreachable statement at line $LINENO"
        done < "${SSTATE}/permissions"

        # repo was not found
        die "sstate managed by \"permissions\" file, but REPO='${CI_PROJECT_URL}' is not authorized there"

    done
    # break's bring us here: permission granted
    echo "permission granted to contribute to shared-state"
fi

SSTATE_MIRRORS=""

case "$GEN" in
    *+*)
        BASEGEN=$GEN
        while true; do
            case "$BASEGEN" in
                *+*)
                    BASEGEN=${BASEGEN%+*}
                    SSTATE_MIRRORS="$SSTATE_MIRRORS ${HOME}/sstate-cache-$BASEGEN"
                    ;;
                *)
                    break
                    ;;
            esac
        done
        ;;
esac

if [ -r "$B"/conf/local.conf ]; then
    . "$OEENV" "$B"

else
    TEMPLATECONF="$TEMPLATECONF" . "$OEENV" "$B"
    echo "$OEENV" > conf/oe-env

    # make sure the branch is current so shadow-image identifies
    # BRANCHNAME (unless CI_COMMIT_REF_NAME does not match the sha -
    # maybe for rebuilds of older versions ?  Or should we just "git
    # branch -f" all the time ?)
    UPSTREAMSHA=$(git rev-parse "origin/${CI_COMMIT_REF_NAME}")
    if [ "$UPSTREAMSHA" = "${CI_COMMIT_SHA}" ]; then
        git branch -f "${CI_COMMIT_REF_NAME}" "origin/${CI_COMMIT_REF_NAME}"
        git checkout "${CI_COMMIT_REF_NAME}"
        # assert we did not change sha1
        test $(git rev-parse HEAD) = ${CI_COMMIT_SHA}
    fi

    if [ -n "$HISTREPO" ]; then
        git clone "$HISTREPO" buildhistory
        git -C buildhistory checkout "$HISTREF"
        cat >> "conf/local.conf" <<EOF

INHERIT += "buildhistory"
BUILDHISTORY_COMMIT = "1"
BUILDHISTORY_FEATURES = "image"
EOF
    fi

    # adjust conf
    cat >> "conf/local.conf" <<EOF

DL_DIR = "${DL_DIR}"
SSTATE_DIR = "${SSTATE}"
RM_WORK_EXCLUDE = ""

INHERIT += "buildstats"
INHERIT += "buildstats-summary"
EOF

    if [ -n "$SSTATE_MIRRORS" ]; then
        echo 'SSTATE_MIRRORS ?= "\' >> "conf/local.conf"
        for m in $SSTATE_MIRRORS; do
            echo "file://.* file://$m/PATH \\n \\" >> "conf/local.conf"
        done
        echo '"' >> "conf/local.conf"
    fi

    if [ -n "$PRSERV" ]; then
        sed -i 's/^PRSERV_HOST = .*/PRSERV_HOST = "'"$PRSERV"'"/' "conf/local.conf"
    fi

    if [ -r $TOP/ci-mkconf-hook.sh ]; then
        echo "Running hook ci-mkconf-hook.sh"
        . $TOP/ci-mkconf-hook.sh
    fi
fi
